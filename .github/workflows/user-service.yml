name: Build

on:
  pull_request:
    branches: ['main']

env:
  PARENT_REPO: ccexdev/parent
  PARENT_BRANCH: main
  SERVICE_NAME: user-service

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout ${{ env.SERVICE_NAME }} repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.SERVICE_NAME }}

      - name: Clone parent repo
        run: git clone --single-branch --branch ${{ env.PARENT_BRANCH }} https://github.com/${{ env.PARENT_REPO }} parent

      - name: Copy ${{ env.SERVICE_NAME }} into parent structure
        run: |
          mkdir -p parent/services
          rm -rf parent/services/${{ env.SERVICE_NAME }}
          cp -r ${{ env.SERVICE_NAME }} parent/services/${{ env.SERVICE_NAME }}

      - name: Build ${{ env.SERVICE_NAME }}
        run: |
          cd parent
          ./gradlew :services:${{ env.SERVICE_NAME }}:clean :services:${{ env.SERVICE_NAME }}:build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get short SHA
        id: vars
        run: |
          cd ${{ env.SERVICE_NAME }}
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build the Docker image
        run: |
          docker build --build-arg SERVICE_NAME=${{ env.SERVICE_NAME }} -t ${{ secrets.ECR_REPOSITORY }}:${{ env.SHORT_SHA }} -f parent/Dockerfile parent
          
      - name: Tag the Docker image as 'latest'
        run: |
          docker tag ${{ secrets.ECR_REPOSITORY }}:${{ env.SHORT_SHA }} ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push to Amazon ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:${{ env.SHORT_SHA }}
          docker push ${{ secrets.ECR_REPOSITORY }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download ECS task definition
        run: |
          aws ecs describe-task-definition \
              --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY }} \
              --query taskDefinition \
              > task-definition.json

      - name: Update image in ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: user-service
          image: ${{ secrets.ECR_REPOSITORY }}:${{ env.SHORT_SHA }}

      - name: Deploy to ECS
        run: |
          aws ecs register-task-definition --cli-input-json file://task-definition-clean.json
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --task-definition new-task-def